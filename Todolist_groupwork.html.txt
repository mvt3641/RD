<!DOCTYPE html>

<html lang="en-us">

<head>

  <meta charset="UTF-8">
  <title>To Do App!</title>

  <style>
    #todo-item {
      font-weight: 700;
      font-size: 2em;
    }
  </style>
</head>

<body>

  <!-- Title -->
  <h1>My To Do's!</h1>

  <!-- Input Form -->
  <form>
    <span id="todo-item">To Do Item: <input id="to-do" type="text" ><input id="add-to-do" value="Add Item" type="submit"></span>
  </form>

  <hr>

  <!-- To-Do List -->
  <div id="to-dos"></div>

  <!-- jQuery -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

  <!-- Script -->
  <script>
    //  ============================= START CODING BELOW! =============================================

    // Create an initial toDoCount variable
    //  On Click event associated with the add-to-do function
    var todoarray = [];
    var toDoCount = 0;
    var newarray = [];
    var myJSON = [];

    $("#add-to-do").on("click", function(event) {
      // prevent form from submitting
      event.preventDefault();

  
      // Get the to-do "value" from the textbox and store it a variable

      var toDoTask = $("#to-do").val().trim();

      // Create a new variable that will hold a "<p>" tag.
      // Then give it an ID in the following form:
      // "item-4" or "item-3" or "item-99", where the number is equal to toDoCount.
      // Then append the to-do "value" as text to this <p> element.

      var toDoCnt = 'item-' + toDoCount;

      var toDoItem = $("<p>");

      toDoItem.attr("id", toDoCnt);
      console.log(toDoCnt);

      toDoItem.append(" " + toDoTask);

      // Create a button with unique identifiers based on what number it is in the list. Again use jQuery to do this.
      // Give your button a data attribute called data-to-do and a class called "checkbox".
      // Lastly append the letter X inside.

      var a = $("<button>");
      a.addClass("checkbox");
      a.attr("data-to-do", toDoCount);
      a.append("X");

      toDoItem = toDoItem.prepend(a);

      $("#to-dos").append(toDoItem);

      $("#to-do").val('');

      toDoCount++;

      todoarray.push(toDoCnt);



      // Append the button to the to do item

      localStorage.clear();  

      // Store the username into localStorage using "localStorage.setItem"

      // var obj = { "name":"John", "age":30, "city":"New York"};
      // var myJSON = JSON.stringify(obj);
      // document.getElementById("demo").innerHTML = myJSON;

      myJSON = JSON.stringify(todoarray);

      localStorage.setItem("to do list", myJSON);
      // Add the button and toDoItem to the to-dos div
      console.log(todoarray);

      // Clear the textbox when done


      // Add to the toDoCount

    });

    //  When a user clicks a check box then delete the specific content
    //  (NOTE: Pay attention to the unusual syntax here for the click event.
    //  Because we are creating click events on "dynamic" content, we can't just use the usual "on" "click" syntax.)
    $(document.body).on("click", ".checkbox", function() {

      // Get the number of the button from its data attribute and hold in a variable called  toDoNumber.
      var toDoNumber=$(this).attr("data-to-do");

      // $(this).attr("data-state", "animate");

      $("#item-" + toDoNumber).remove();

      // Select and Empty the specific <p> element that previously held the to do item number.
      var item_check = "item-" + toDoNumber;

      var newarray = JSON.parse(myJSON);
      console.log (newarray);

       for (var i = 0; i < newarray.length; i++) {
        if (newarray[i] == item_check){
          console.log(item_check, + " " + i);
          newarray.splice(i,1);
          console.log(newarray);
        }
      }


// console.log(this.activeEffects); // Prints my array
//     console.log(this.activeEffects.slice(0,1)); // Remove from index 0, and remove one.
//     console.log(this.activeEffects); // Prints array again, this time my element should be 

    });
  </script>

</body>

</html>
